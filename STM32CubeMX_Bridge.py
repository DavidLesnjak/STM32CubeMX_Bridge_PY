# Copyright (c) 2023 Arm Limited. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the License); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# STM32CubeMX Manager

import os
import sys
import subprocess
import argparse
import time
import datetime
import shlex
import os.path as path

STM32CubeMX_PATH=os.environ.get("STM32CubeMX_PATH")
STM32CubeMX_PROJ_NAME='STM32CubeMX'
STM32CubeMX_GENLAYER_NAME="STM32CubeMX.cgen.yml"

STM32CubeMX_GENERATED_GROUP="STM32CubeMX"
HAL_DRIVER_GROUP="HAL Driver"

UNUSED_FILES=[""]

# generate gpdsc
def generate_gpdsc(mx_data, cgen_dir, device, board, date):
    try:
        gpdsc = path.join(cgen_dir, "FrameworkCubeMX.gpdsc")
        if path.exists(gpdsc) == True:
            # Delete gpdsc file if exists
            os.remove(gpdsc)
        # Open gpdsc file
        f_gpdsc = open(gpdsc, "w")

        # Compose gpdsc
        # Disclaimer
        f_gpdsc.writelines(["<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
                            "<!-- ******************************************************************************\n",
                           f" * File Name   : FrameworkCubeMX.gpdsc\n",
                           f" * Date        : {date}\n",
                            " * Description : Generator PDSC File generated by STM32CubeMX (DO NOT EDIT!)\n",
                            " ****************************************************************************** -->\n",
                            "\n",
                            "<package xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\" schemaVersion=\"1.0\" xs:noNamespaceSchemaLocation=\"PACK.xsd\">\n",
                            "  <vendor>Keil</vendor>\n",
                            "  <name>FrameworkCubeMX</name>\n",
                            "  <description>STM32CubeMX generated pack description</description>\n",
                            "  <url>project-path</url>\n",
                            "  <releases>\n",
                            "    <release version=\"1.0.0\">\n",
                           f"     - Generated: {date}\n",
                            "    </release>\n",
                            "  </releases>\n",
                            "  <generators>\n",
                            "    <generator id=\"STM32CubeMX\" Gvendor=\"STMicroelectronics\" Gtool=\"STM32CubeMX\" Gversion=\"6.4.0\">\n",
                            "      <description>STM32CubeMX Environment</description>\n",
                           f"      <select Dname=\"{device}\" Dvendor=\"STMicroelectronics:13\"/>\n",
                            "      <exe>\n",
                            "        <command>$SMDK/CubeMX/run_STM32CubeMX_Manager_py.bat</command>\n",
                            "        <argument>$G</argument>\n",
                            "      </exe>\n",
                            "      <project_files>\n"])
        for f in mx_data["generated_files"]:
            f_gpdsc.write( f"        <file category=\"source\" name=\"{f}\"/>\n")
        for f in mx_data["hal_driver_files"]:
            f_gpdsc.write( f"        <file category=\"source\" name=\"{f}\"/>\n")

        f_gpdsc.writelines(["      </project_files>\n",
                            "    </generator>\n",
                            "  </generators>\n",
                            "  <taxonomy>\n",
                            "    <description Cclass=\"Device\" Cgroup=\"STM32Cube Framework\" generator=\"STM32CubeMX\">STM32Cube Framework</description>\n",
                            "  </taxonomy>\n",
                            "  <components>\n",
                            "    <component generator=\"STM32CubeMX_NS\" Cvendor=\"Keil\" Cclass=\"Device\" Cgroup=\"STM32Cube Framework\" Csub=\"STM32CubeMX\" Cversion=\"2.0.0\" condition=\"STCubeMX\">\n",
                            "      <description>Configuration via STM32CubeMX</description>\n",
                            "      <RTE_Components_h>\n",
                            "        #define RTE_DEVICE_FRAMEWORK_CUBE_MX\n",
                            "      </RTE_Components_h>\n",
                            "      <files>\n",
                            "      </files>\n",
                            "    </component>\n",
                            "  </components>\n",
                            "</package>"])
    except Exception as e:
        sys.exit(f"Error: {e}")

# generate generator layer
def generate_genlayer(mx_data, cgen_dir, device, board, date):

    try:
        genlayer_yml = path.join(cgen_dir, STM32CubeMX_GENLAYER_NAME)
        if path.exists(genlayer_yml) == True:
            # Delete genlayer.yml file if exists
            os.remove(genlayer_yml)
        # Open genlayer.yml file
        f_genlayer_yml = open(genlayer_yml, "w")

        # Compose genlayer.yml
        # Disclaimer
        f_genlayer_yml.writelines([ "#\n",
                                   f"# File Name   : {STM32CubeMX_GENLAYER_NAME}\n",
                                   f"# Date        : {date}\n",
                                    "# Description : Generator layer\n",
                                    "#\n",
                                    "\n"])

        # Generator
        f_genlayer_yml.writelines([ "Generator:\n",
                                    "  generated-by: STM32CubeMX_Bridge.py\n",
                                   f"  for-device  : {device}\n"])
        if board != None:
           f_genlayer_yml.write(   f"  for-board   : {board}\n")

        # Packs
        f_genlayer_yml.writelines([ "  packs:\n",
                                   f"    - pack: Keil::STM32U5xx_DFP\n",  # ToDo: generic solution
                                    "\n"])
        # Defines
        f_genlayer_yml.write     (  "  define:\n")
        for d in mx_data["defines"]:
            f_genlayer_yml.write ( f"    - {d}\n")

        # Include paths
        f_genlayer_yml.write     (  "  add-path:\n")
        for i in mx_data["include_paths"]:
            f_genlayer_yml.write ( f"    - {i}\n")

        # Groups
        f_genlayer_yml.writelines([ "  groups:\n",
                                   f"    - group: {STM32CubeMX_GENERATED_GROUP}\n",
                                    "      files:\n"])
        for f in mx_data["generated_files"]:
            f_genlayer_yml.write(  f"        - file: {f}\n")

        f_genlayer_yml.writelines([f"    - group: {HAL_DRIVER_GROUP}\n",
                                    "      files:\n"])
        for f in mx_data["hal_driver_files"]:
            f_genlayer_yml.write(  f"        - file: {f}\n")

        f_genlayer_yml.close()

    except Exception as e:
            sys.exit(f"Error: {e}")

# Parse .mxproject
def parse_mxproject (mxproject, cgen_dir, trustzone):
    generated_files = []
    hal_driver_files = []
    include_paths = []
    defines = []

    try:
        # Open .mxproject file
        f_mxproject = open(mxproject, "r")

        # Parse .mxproject file to get HAL driver files and STM32CubeMX generated files
        if trustzone == "non-secure":
            source_file_tag ="[CortexM33NS:PreviousUsedKeilFiles]"
        elif trustzone == "secure":
            source_file_tag ="[CortexM33S:PreviousUsedKeilFiles]"
        else:
            source_file_tag ="[PreviousUsedKeilFiles]"

        line = f_mxproject.readline()
        while line.find(source_file_tag) == -1:
            line = f_mxproject.readline()

        cube_dir = path.dirname(mxproject)
        cwd = os.getcwd()
        os.chdir(path.join(cube_dir, "MDK-ARM"))

        # Source Files
        line = f_mxproject.readline()
        line = line[line.find('=')+1:]
        file_list = line.split(';')
        for f in file_list:
            if f != "" and f != "\r" and f != "\n" and f.find("system_") == -1:
                if f.find(":") != -1:
                    tmp_str = f[0:3]
                    if tmp_str.find("..") == 0:
                        f = f[3:]
                if f.find("_HAL_Driver") == -1:
                    f = path.abspath(f)
                    f = path.relpath(f, cgen_dir)
                    tmp_str = f.replace("\\", "/")
                    if generated_files.count(tmp_str) == 0:
                        generated_files.append(tmp_str)
                else:
                    f = path.abspath(f)
                    f = path.relpath(f, cgen_dir)
                    tmp_str = f.replace("\\", "/")
                    if hal_driver_files.count(tmp_str) == 0:
                        hal_driver_files.append(tmp_str)

        # Include paths
        line = f_mxproject.readline()
        line = line[line.find('=')+1:]
        include_list = line.split(';')
        for i in include_list:
            if i != "" and i != "\r" and i != "\n":
                if i.find(":") != -1:
                    tmp_str = i[0:3]
                    if tmp_str.find("..") == 0:
                        i = i[3:]
                i = path.abspath(i)
                i = path.relpath(i, cgen_dir)
                tmp_str = i.replace("\\", "/")
                if include_paths.count(tmp_str) == 0:
                    include_paths.append(tmp_str)

        # Defines
        line = f_mxproject.readline()
        line = line[line.find('=')+1:]
        define_list = line.split(';')
        for d in define_list:
            if d != "" and d != "\r" and d != "\n":
                if defines.count(d) == 0:
                    defines.append(d)

        os.chdir(cwd)
    except Exception as e:
        sys.exit(f"Error: {e}")

    mx_data = {
      "generated_files" : generated_files,
      "hal_driver_files" : hal_driver_files,
      "include_paths" : include_paths,
      "defines" : defines
    }
    return mx_data

# Run STM32CubeMX
def run_STM32CubeMX(mxproject, device, cube_base_dir, board):

    if path.exists(path.normpath(mxproject)) == True:
        os.remove(mxproject)

    java_exe = "'" + path.join(path.join(path.join(STM32CubeMX_PATH, "jre"), "bin"), "java.exe") + "'"
    stm32_cubemx_exe = "'" + path.join(STM32CubeMX_PATH, "STM32CubeMX.exe") + "'"

    # Check is STM32CubeMX project file already exists
    STM32CubeMX_ioc = path.join(cube_base_dir, f"{STM32CubeMX_PROJ_NAME}.ioc")
    if path.exists(path.normpath(STM32CubeMX_ioc)) == True:
        # Open existing STM32CubeMX project
        try:
            STM32CubeMX_ioc = "'" + STM32CubeMX_ioc + "'"
            command = f"{java_exe} -jar {stm32_cubemx_exe} {STM32CubeMX_ioc}"
            command = shlex.split(command)
            stm32cubemx_process = subprocess.Popen(command)
        except:
            sys.exit("Error: Failed to open STM32CubeMX.ioc!")

    else:
        # Open new STM32CubeMX project
        ioc_script = path.join(cube_base_dir, "project.script")

        if path.exists(ioc_script) == True:
            os.remove(ioc_script)

        try:
            f = open(ioc_script, "w")
            if board == None:
                f.write(f"load {device}\n")
            else:
                f.write(f"loadboard {board} allmodes\n")


            cube_dir = path.dirname(cube_base_dir)
            cube_dir = cube_dir.replace('\\', '/')
            f.writelines([f"project name {STM32CubeMX_PROJ_NAME}\n", "project toolchain \"MDK-ARM V5\"\n", f"project path \"{cube_dir}\"\n", "SetCopyLibrary  \"copy only\"\n"])
            f.close()
        except:
            sys.exit("Error: Failed to create temporary script file!")

        try:
            ioc_script = "'" + ioc_script + "'"
            command = f"{java_exe} -jar {stm32_cubemx_exe} -s {ioc_script}"
            command = shlex.split(command)
            stm32cubemx_process = subprocess.Popen(command)
        except:
            sys.exit("Error: Failed to open STM32CubeMX.ioc!")

    return stm32cubemx_process

# Validate file
def validate_file(file):
    if path.isfile(file):
        return file
    else:
        raise argparse.ArgumentTypeError(f"Invalid file: {file}!")

# parse arguments
def parse_arguments():
    formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=60)
    parser = argparse.ArgumentParser(description="STM32CubeMX Manager",
                                      formatter_class=formatter)
    parser.add_argument("cbuild_yml", metavar="<Cbuild yml file>",
                         help="<context.cbuild.yml>", type=validate_file)

    return parser.parse_args()

# main
def main():
    device = ""
    board = ""
    cube_base_dir = ""
    cgen_dir = ""
    trustzone = "off"

    args = parse_arguments()

    cbuild_yml = path.normpath(f"{args.cbuild_yml}")
    os.chdir(path.dirname(cbuild_yml))

    try:
        file = open(cbuild_yml, "r")
        for line in file:
            if line.find("device: STM32") != -1:
                device = line.split(": ")[1].rstrip()
            if line.find("board: STMicroelectronics::") != -1:
                board = line.split("::")[1].rstrip()

            #
            # NOTE - ToDo: How cgen_dir is described in cbuild.yml ?!!
            #
            if line.find("gpdsc:") != -1:
                cgen_dir = path.dirname(line.split("gpdsc: ")[1])

            #
            # NOTE - ToDo: How generator working dir is described in cbuild.yml!!
            #
            if line.find("solution:") != -1:
                cube_base_dir = path.dirname(line.split("solution: ")[1])
            if line.find("trustzone:") != -1:
                trustzone = line.split(": ")[1].rstrip()

    except Exception as e:
        sys.exit(f"Error: {e}")

    if (trustzone == "off"):
        #
        # NOTE - ToDo: How generator working dir is described in cbuild.yml!!
        #
        cube_base_dir = cgen_dir
    if device == "":
        sys.exit(f"cbuild.yml parsing failed!")
    if cgen_dir == "":
        sys.exit(f"cbuild.yml parsing failed!")
    if cube_base_dir == "":
        sys.exit(f"cbuild.yml parsing failed!")

    cgen_dir = path.abspath(path.normpath(f"{cgen_dir}"))
    cube_base_dir = path.join(cube_base_dir, STM32CubeMX_PROJ_NAME)
    cube_base_dir = path.abspath(path.normpath(f"{cube_base_dir}"))

    if path.exists(cube_base_dir) == False:
        os.mkdir(cube_base_dir)

    mxproject = path.join(cube_base_dir, ".mxproject")

    # STM32CubeMX run
    stm32cubemx_process = run_STM32CubeMX(mxproject, device, cube_base_dir, board)

    mxproject_modified_time = 0.0

    while stm32cubemx_process.poll() is None:
        if path.exists(mxproject) == True:
            mtime = os.path.getmtime(mxproject)
            if  mtime != mxproject_modified_time:
                mxproject_modified_time = os.path.getmtime(mxproject)
                mx_data = parse_mxproject(mxproject, cgen_dir, trustzone)
                date = datetime.datetime.fromtimestamp(mxproject_modified_time).strftime('%d/%m/%Y %H:%M:%S')
                generate_genlayer(mx_data, cgen_dir, device, board, date)
                generate_gpdsc(mx_data, cgen_dir, device, board, date)

        time.sleep(1)
# main
if __name__ == '__main__':
    print("Press Ctrl+C to exit.\n")
    main()
